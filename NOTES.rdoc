== Execution order

  0. original method
  1. before
  2. after
  3. around
  4. before
  5. after
  6. before
  7. around

  ==>

  1
  4
  6
     - 3.1
    |       - 7.1
  3 |  7 --|  0
    |       - 7.2
     - 3.2
  2
  5

== TEST TODO

Class inheritance

Module inclusion

Mix aspects in body and in module

Mix aspects from multiple modules

Mix aspects in body and inherited

Mix aspects in body, inherited and in module

== optimization idea

On create method, define method as a place holder which will generate the real method on first execution

== Inheritance / inclusion

Automatically group aspects by the class/module that creates them
Before aspects defined in base class run immediately before wrapped method
After aspects run immediagely after
Around aspects wrap around wrapped method

Before aspects defined in module that are included at the beginning run before aspects from base class and after those in current class
After aspects in module run after aspects from base class and before those in current class
Around aspects in module wrap around wrapped method + before/after aspects in base class

Before aspects defined in module that are included later run before all aspects already defined so far
After aspects in module run after all aspects
Around aspects in module wrap around wrapped method + before/after aspects
