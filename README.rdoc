= aspect4r

Add before_method, after_method and around_method to classes.

== Usage

  class A
    include Aspect4r
    
    def test value
      ...
    end

    def do_something value
      ...
    end
    
    def do_something_else result, value
      ...
    end
  
    before_method :test do |value|
      puts "entering test(#{value})"
    end

    before_method :test, :do_something
    
    before_method_check :test do |value|
      value >= 0
    end

    after_method :test do |result, value|
      puts "test(#{value}) returned #{result}"
      result
    end

    after_method :test, :do_something_else

  end
  
== TODO

* P2 before/... blocks can be given a name, this can be used in skip_before_method

  before_method :xxx, :name => :do_something do
  end

* P1 In before/after/around.rb, rename original method to xxx_a4r if xxx is defined and xxx_a4r is not
* P1(documentation) Original method should be renamed to xxx_a4r if it is defined after before/after definitions.

  class A
    include Aspect4r
    before_method :xxx do
      ...
    end
    
    def xxx_a4r     # instead of xxx
      ...
    end
  end

* P1 before/... populates a class inheritable variable a4r_info(hash) which contains all before/after/... information
  which can be used to reconstruct xxx method.
  
  See http://www.raulparolari.com/Rails/class_inheritable for how to implement class inheritable variable
  
* P2 around method will wrap original method + before/after methods defined before it.
* P4 skip_before_method/skip_after_method/skip_around_method
* P5 before_method can take :before option and insert before method before specified method
* P3 enable/disable debug mode

== Note on Patches/Pull Requests
 
* Fork the project.
* Make your feature addition or bug fix.
* Add tests for it. This is important so I don't break it in a
  future version unintentionally.
* Commit, do not mess with rakefile, version, or history.
  (if you want to have your own version, that is fine but bump version in a commit by itself I can ignore when I pull)
* Send me a pull request. Bonus points for topic branches.

== Copyright

Copyright (c) 2010 Guoliang Cao. See LICENSE for details.
